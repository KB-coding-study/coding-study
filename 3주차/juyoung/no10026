import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
    static int N, General, Strange;
    static int[][] arr,visitedGeneral, visitedStrange;
    static Queue<Node321> qGeneral, qStrange;
    static int[] dy = {-1, 0, 1, 0};
    static int[] dx = {0, -1, 0, 1};

    public static void main(String[] args) {
        Main m = new Main();
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        sc.nextLine();
        qGeneral = new LinkedList<>();
        qStrange = new LinkedList<>();
        arr = new int[N][N];
        visitedGeneral = new int[N][N];
        visitedStrange = new int[N][N];
        General = 0;
        Strange = 0;

        // 입력
        for (int i = 0 ; i < N ; i++) {
            char[] charArr = sc.nextLine().toCharArray();
            for (int j = 0 ; j < N ; j++) {
                switch (charArr[j]) {
                    case 'R':
                        arr[i][j] = 2;
                        break;
                    case 'G':
                        arr[i][j] = 1;
                        break;
                    default:
                        arr[i][j] = 0;
                }
            }
        }

        //검증
        for (int i = 0; i < N ; i++) {
            for (int j = 0 ; j < N ; j++) {
                //정상인
                if (visitedGeneral[i][j] == 0) {
                    qGeneral.add(new Node321(i,j));
                    m.general();
                    General++;
                }
                //적록색약
                if (visitedStrange[i][j] == 0) {
                    qStrange.add(new Node321(i,j));
                    m.strange();
                    Strange++;
                }
            }
        }
        System.out.printf("%d %d", General, Strange);
    }

    public void general() {
        while(!qGeneral.isEmpty()) {
            Node321 node = qGeneral.poll();
            int y = node.y;
            int x = node.x;

            for (int i = 0 ; i < 4 ; i++) {
                if (y+dy[i]>=0 && y+dy[i]<N && x+dx[i]>=0 && x+dx[i]<N) {
                    if (visitedGeneral[y+dy[i]][x+dx[i]]==0 && arr[y+dy[i]][x+dx[i]]==arr[y][x]) {
                        qGeneral.add(new Node321(y+dy[i], x+dx[i]));
                        visitedGeneral[y+dy[i]][x+dx[i]]=1;
                    }
                }
            }
        }
    }

    public void strange() {
        while(!qStrange.isEmpty()) {
            Node321 node = qStrange.poll();
            int y = node.y;
            int x = node.x;

            if (arr[y][x] == 0) {
                for (int i = 0; i < 4; i++) {
                    if (y + dy[i] >= 0 && y + dy[i] < N && x + dx[i] >= 0 && x + dx[i] < N) {
                        if (visitedStrange[y + dy[i]][x + dx[i]] == 0 && arr[y + dy[i]][x + dx[i]] == arr[y][x]) {
                            qStrange.add(new Node321(y + dy[i], x + dx[i]));
                            visitedStrange[y + dy[i]][x + dx[i]] = 1;
                        }
                    }
                }
            }
            if (arr[y][x] == 2 || arr[y][x] == 1) {
                for (int i = 0; i < 4; i++) {
                    if (y + dy[i] >= 0 && y + dy[i] < N && x + dx[i] >= 0 && x + dx[i] < N) {
                        if (visitedStrange[y + dy[i]][x + dx[i]] == 0 && (arr[y + dy[i]][x + dx[i]] == 2 || arr[y + dy[i]][x + dx[i]] == 1)) {
                            qStrange.add(new Node321(y + dy[i], x + dx[i]));
                            visitedStrange[y + dy[i]][x + dx[i]] = 1;
                        }
                    }
                }
            }
        }
    }
}

class Node321 {
    int y, x;

    public Node321(int y, int x) {
        this.y = y;
        this.x = x;
    }
}
